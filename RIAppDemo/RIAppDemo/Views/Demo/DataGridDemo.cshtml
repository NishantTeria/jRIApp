@using System.Text
@using RIAPP.DataService
@using RIAppDemo.BLL.DataServices
@using RIAppDemo.Utils
@{
    Layout = "~/Views/Shared/_LayoutDemo.cshtml";
}
@{
    ViewBag.Title = "DataGrid Demo ";
}

@section CssImport
{
}

@section JSImport
{
    <script src="@Url.Content("~/Scripts/RIAppDemo/common.js",true)" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/RIAppDemo/header.js",true)" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/RIAppDemo/gridDemo.js",true)" type="text/javascript"></script>
}
<style type="text/css">
#demoHeader label
{
    color: Blue;
}

#demoContent
{
    overflow:visible; 
    height:600px;
    vertical-align:top;
}

.productTableWrap {height:100%; width:100%}
.productTableContainer {}
.productTableHeader {}

.number-display {color:Blue; font-weight: bold;}
.number-edit input[type="text"] {color:Black;}

.name-display {color:Blue; font-weight: bold;}
.name-edit input[type="text"] {color:Black;}
.name-edit textarea {color:Black;}

.listbox-edit select {width:75%;}

.selectorCol { vertical-align:middle;}
.selectorCell {text-align:center;vertical-align:middle}

.rowInactive { text-decoration:line-through; color: Gray; }

table.ria-data-table tr:nth-child(even) {
    background-color: #ECF2F6;
}
</style>

<script type="text/javascript">
   //global error handler - the last resort (typically display message to the user)
    RIAPP.global.addHandler('error', function (sender, args) {
            debugger;
            alert(args.error.message);
    });


    //RIAPP.global.UC - this is special namespace (empty object) to which we can attach any user code (functions, objects, etc)
    //which can be globally visible - usefull when we don't want to introduce new global variables
    //***THIS particular function initializes view models for the application***
     RIAPP.global.UC.fn_initApp = function (app) {
            //initialize images folder path
            app.global.defaults.imagesPath = '@Url.Content("~/Scripts/jriapp/img/")';
            
            //the way to access types is through modules - or use app.getType, which is more convenient
            //to import the types
            var gridDemoMod = app.modules.gridDemo, commonMod = app.modules.common, headerMod = app.modules.header;

            //create view models which are in our custom modules
            app.VM.errorVM = commonMod.ErrorViewModel.create(); //app.getType('custom.ErrorViewModel').create();
            app.VM.headerVM = headerMod.HeaderVM.create();
            app.VM.productVM = gridDemoMod.ProductViewModel.create();
            app.VM.uploadVM = gridDemoMod.UploadThumbnailVM.create('@Url.RouteUrl("Default",new {controller="Upload", action="ThumbnailUpload"})');
            //adding event handler for our custom event
            app.VM.uploadVM.addHandler('files_uploaded',function(s,a){
                a.product.refresh(); //need to update ThumbnailPhotoFileName
            });

            //***here is two examples how to register loaders for individual templates***
            //application registers template loaders in its own application's namespace
            //if global loaded templates with the same name
            //then application's loaders will take precedence over global ones
            app.registerTemplateLoader('productEditTemplate', function(name){
                return app.global.$.get('@Url.Action("DownloadTemplate", "Download", new {name="productEditTemplate"})');
            });
           
            //using memoize pattern so there will not be repeated loads of the same template
            app.registerTemplateLoader('sizeDisplayTemplate', 
              (function(name){
                    var savePromise;
                    return function(name){
                        if (!!savePromise)
                            return savePromise;
                        savePromise = app.global.$.get('@Url.Action("DownloadTemplate", "Download", new { name = "sizeDisplayTemplate" })');
                        return savePromise;
                    };
                }())
            );

            //example of ajax call to load lookups - first load lookups, then load products
            //at the end it displays in an alert out of band data returned from the server (see ReadProduct data service method)
            /*
             app.VM.productVM.filter.load().pipe(function()
             {
                return app.VM.productVM.load();}
             ).pipe(function(extrainfo){alert(extrainfo.test);},function(){alert('load failed');});
            */

            //load lookups by embedding json data in the page (it is faster then above commented load pipeline)
            //if you want to try ajax load, then comment these below lines using server side commenting 
                @*example of server side razor style comment*@
            //and uncomment the above with loading of lookups by ajax calls
            app.VM.productVM.filter.modelData = @Html.Action("ProductModelData", "RIAppDemoService");
            app.VM.productVM.filter.categoryData = @Html.Action("ProductCategoryData", "RIAppDemoService");
            app.VM.productVM.load().pipe(function(loadRes){/*alert(loadRes.outOfBandData.test);*/ return;},function(){alert('load failed');});

        }; //end fn_Main

     //this handler is invoked when the document DOM structure is loaded - the same as using jQuery.ready
     RIAPP.global.addHandler('load', function (sender, args) {
           //we load templates from the server
           RIAPP.global.loadTemplates('@Url.Action("Download", "Templates", new {name="DataGridDemo"})');
           
           //create application instance
           var app = RIAPP.Application.create({ app_name: 'default', //each application's name on the page must be unique
                service_url: '@Url.RouteUrl("Default",new {controller="RIAppDemoService", action=""})',
                metadata: @Html.Action("Metadata", "RIAppDemoService"),
                createDbContext: true, //we want that the application  created DbContext instance
                moduleNames:['common','header','gridDemo'] //custom modules which will be initialized
            });

            //here we could process application's errors
            app.addHandler('error', function (sender, data) {
                debugger;
                data.isHandled = true;
                if (!app.VM.errorVM)
                {
                  alert(data.error.message);
                  return;
                }
                app.VM.errorVM.error = data.error;
                app.VM.errorVM.showDialog();
            });

            //define calculated fields for entities in the application's event handler
            app.addHandler('define_calc', function (sender, data) {
                if (data.dbSetName == 'Product' && data.fieldName == 'IsActive') {
                    data.getFunc = function () {
                        return !this.SellEndDate;
                    };
                }
            });

            //start application - fn_initApp will init all view models
            //after executing our fn_initApp this method performs databinding
            app.startUp(app.global.UC.fn_initApp);
     });
</script>


<h2  style="display:inline-block;">@ViewBag.Title</h2>
@*
<!--
    this shows the use of new element view- dynacontent
    it is used to display different template in one region just by switching its templateID property
    it also has dataContext property to set datacontext to the template
    these two properties are data bindable- we can bind them to our view model to change display dynamically  
    P.S. - i will add new separate demo for this usefull feature
-->
<div id="demoDynaContent" data-bind="{this.templateID,to=templateID,source=VM.productVM}" data-view="name=dynacontent">
</div>
*@

<header id="title" style="width:99%; border:1px Solid LightBlue; padding:5px;margin-bottom:5px;-moz-border-radius: 4px;border-radius:4px;">
<a href="#" id="expander" style="margin-left:2px;" data-bind="{this.command,to=expanderCommand,mode=OneWay,source=VM.headerVM}" data-view="name=expander"></a>
<span style="margin-left:5px;">Filter</span>
</header>
<form id="demoHeader" data-bind="{this.dataContext,source=VM.productVM}" data-view="name=dataform">
    <table>
        <tr>
            <td>
              <label for="prodNum">Product Number:</label>
              <input type="text" id="prodNum" placeholder="Product number" data-bind="{this.value,to=filter.prodNumber,mode=TwoWay}{this.toolTip,to=filter.searchTextToolTip}" />
            </td>
            <td>
               <label for="prodName">Name:</label>
               <input type="text" id="prodName" placeholder="Name" data-bind="{this.value,to=filter.name,mode=TwoWay}{this.toolTip,to=filter.searchTextToolTip}" />
            </td>
            <td>
               <label for="prodMCat">Main Category:</label>
               <select id="prodMCat" size="1" class="span3" data-bind="{this.dataSource,to=filter.ParentCategories}{this.selectedValue,to=filter.parentCategoryID,mode=TwoWay}" data-view="options:{valuePath=ProductCategoryID,textPath=Name}"></select>
            </td>
            <td>
                <label for="prodSCat">Sub Category:</label>
                <select id="prodSCat" size="1" class="span2" data-bind="{this.dataSource,to=filter.ChildCategories}{this.selectedValue,to=filter.childCategoryID,mode=TwoWay}{this.selectedItem,to=filter.selectedCategory,mode=TwoWay}{this.toolTip,to=filter.selectedCategory.Name}" data-view="options:{valuePath=ProductCategoryID,textPath=Name}"></select>
            </td>
             <td>
                <label for="prodMod">Model:</label>
                <select id="prodMod" size="1" class="span2" data-bind="{this.dataSource,to=filter.ProductModels}{this.selectedValue,to=filter.modelID,mode=TwoWay}{this.selectedItem,to=filter.selectedModel,mode=TwoWay}{this.toolTip,to=filter.selectedModel.Name}" data-view="options:{valuePath=ProductModelID,textPath=Name}"></select>
            </td>
        </tr>
    </table>

    <a id="btn_filter" class="btn btn-info btn-small" data-bind="{this.command,to=loadCommand}"><i class="icon-search"></i>&nbsp;Filter</a>
    <a id="btn_reset" class="btn btn-info btn-small" data-bind="{this.command,to=filter.resetCommand}"><i class="icon-retweet"></i>&nbsp;Reset</a>
</form>

<div id="demoContent" data-bind="{this.isBusy,to=dbContext.isBusy}" data-view="name=busy_indicator">
    <div style="height:85%; vertical-align:top;">
    <table data-app='default' data-name="gridProducts" data-bind="{this.dataSource,to=dbSet,source=VM.productVM}{this.propChangedCommand,to=propChangeCommand,source=VM.productVM}" 
    data-view="options={wrapCss:productTableWrap,containerCss:productTableContainer,headerCss:productTableHeader,rowStateField:IsActive,isHandleAddNew:true,isCanEdit:true,editor:{templateID:productEditTemplate,width:550,height:650,submitOnOK:true,title:'Product editing'},details:{templateID:productDetailsTemplate}}">
        <thead>
        <tr>
            <th data-column="width:35px,type:row_expander"/>
            <th data-column="width:50px,type:row_actions"/>
            <th data-column="width:40px,type:row_selector,rowCellCss:selectorCell,colCellCss:selectorCol"/>
            <th data-column="width:100px,sortable:true,title:ProductNumber" data-content="fieldName:ProductNumber,css:{displayCss:'number-display',editCss:'number-edit'}"/>
            <th data-column="width:25%,sortable:true,title:Name" data-content="fieldName:Name"/>
            <th data-column="width:90px,title:'Weight',sortable:true" data-content="fieldName:Weight"/>
            <th data-column="width:15%,title=CategoryID,sortable:true,sortMemberName=ProductCategoryID" data-content= "fieldName=ProductCategoryID,lookup:{dataSource=dbContext.dbSets.ProductCategory,valuePath=ProductCategoryID,textPath=Name}"/>
            <th data-column="width:100px,sortable:true,title='SellStartDate'" data-content="fieldName=SellStartDate"/>
            <th data-column="width:100px,sortable:true,title='SellEndDate'" data-content="fieldName=SellEndDate"/>
            <th data-column="width:90px,sortable:true,title='IsActive'" data-content="fieldName=IsActive"/>
            <th data-column="width:10%,title=Size,sortable:true,sortMemberName=Size" data-content="template={displayID=sizeDisplayTemplate,editID=sizeEditTemplate}"/>
        </tr>
        </thead>
        <tbody></tbody>
    </table>
    </div>
     <div style="margin-top:40px;text-align:left; border:none;width:100%;height:15%">
        <!--pager-->
        <div style="float:left;" data-bind="{this.dataSource,to=dbSet,source=VM.productVM}" data-view="name=pager,options={sliderSize:20,hideOnSinglePage=false}"></div>
        <div style="float:left; padding-left:10px;padding-top:10px;"><span>Total:</span>&nbsp;<span data-bind="{this.value,to=totalCount,source=VM.productVM.dbSet}"></span>,&nbsp;&nbsp;<span>Selected:</span>&nbsp;<span data-bind="{this.value,to=selectedCount,source=VM.productVM}"></span></div>

        <button class="btn btn-info btn-small" style="float:right;" data-bind="{this.command,to=addNewCommand,mode=OneWay,source=VM.productVM}"><i class="icon-plus"></i>&nbsp;New Product</button>
     </div>
 </div>

@section RiaTemplates
{
    
}
