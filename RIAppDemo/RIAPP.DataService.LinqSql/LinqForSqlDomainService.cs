using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Principal;
using System.Reflection;
using System.Collections;
using System.Transactions;
using System.Data.Linq.Mapping;
using RIAPP.DataService.Utils;

namespace RIAPP.DataService.LinqSql
{
    public abstract class LinqForSqlDomainService<TDB> : BaseDomainService
        where TDB : System.Data.Linq.DataContext
    {
        private TDB _db;
        private bool _ownsDb = false;
        
        public LinqForSqlDomainService(TDB db, IPrincipal principal)
            :base(principal)
        {
            this._db = db;
        }

        public LinqForSqlDomainService(IPrincipal principal)
            : this(null,principal)
        {
            
        }


        #region Overridable Methods
        protected virtual TDB CreateDataContext() {
            return Activator.CreateInstance<TDB>();
        }

        protected override Metadata GetMetadata()
        {
            MethodInfo[] methList = this.GetType().GetMethods();
            LinkedList<DbSetInfo> dbsets = new LinkedList<DbSetInfo>();
            Array.ForEach(methList,(methodInfo) =>
            {
                Type entityType = null;
                if (methodInfo.IsDefined(typeof(QueryAttribute), false))
                {
                    Type[] genArgs = methodInfo.ReturnType.GetGenericArguments();
                    if (genArgs.Length == 1)
                    {
                        entityType = genArgs[0];
                    }
                    else
                        return;
                    DbSetInfo dbSetInfo = new DbSetInfo() { dbSetName = entityType.Name };
                    dbsets.AddLast(dbSetInfo);
                    PropertyInfo[] props = entityType.GetProperties();
                    short pkNum = 0;
                    Array.ForEach(props, (propInfo) => {
                        if (propInfo.IsDefined(typeof(ColumnAttribute), false)) {
                            ColumnAttribute colAttr = (ColumnAttribute)propInfo.GetCustomAttributes(typeof(ColumnAttribute), false).First();
                            FieldInfo fldInfo = new FieldInfo(){isAutoGenerated =colAttr.IsDbGenerated};
                            if (colAttr.IsPrimaryKey) {
                                fldInfo.isPrimaryKey = ++pkNum;
                            }
                            bool isArray = false;
                            fldInfo.dataType = DataHelper.DataTypeFromType(propInfo.PropertyType, out isArray);
                            fldInfo.isNullable = DataHelper.IsNullableType(propInfo.PropertyType) || colAttr.CanBeNull;
                            fldInfo.isRowTimeStamp = colAttr.IsVersion;
                            fldInfo.isNeedOriginal = colAttr.UpdateCheck != UpdateCheck.Never;
                            fldInfo.isReadOnly = !propInfo.CanWrite;
                            dbSetInfo.fieldInfos.Add(fldInfo);
                        }
                    });
                }
            });

            Metadata metadata = new Metadata();
            metadata.DbSets.AddRange(dbsets);
            return metadata;
        }

        protected override void ExecuteChangeSet()
        {
            using (TransactionScope transScope = new TransactionScope(TransactionScopeOption.RequiresNew, 
                new TransactionOptions { IsolationLevel = IsolationLevel.ReadCommitted, Timeout = TimeSpan.FromMinutes(1.0) }))
            {
                this.DB.SubmitChanges();
                
                transScope.Complete();
            }
        }

        #endregion

        protected TDB DB
        {
            get
            {
                if (this._db == null)
                {
                    this._db = this.CreateDataContext();
                    if (this._db != null)
                    {
                        this._ownsDb = true;
                    }
                }
                return this._db;
            }
        }

        protected override void Dispose(bool isDisposing)
        {
            if (this._db != null && this._ownsDb)
            {
                this._db.Dispose();
                this._db = null;
                this._ownsDb = false;
            }
        }
    }
}
